cmake_minimum_required(VERSION 3.12)
project(auto_apms_px4)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()

find_package(ament_cmake REQUIRED)
find_package(rclcpp_components REQUIRED)
find_package(px4_msgs REQUIRED)
find_package(px4_ros2_cpp REQUIRED)
find_package(eigen3_cmake_module REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(tf2_eigen REQUIRED)
find_package(auto_apms_util REQUIRED)
find_package(auto_apms_px4_interfaces REQUIRED)

set(_AUTO_APMS_PX4__ARM_DISARM_ACTION_NAME "arm_disarm")
set(_AUTO_APMS_PX4__ENABLE_HOLD_ACTION_NAME "enable_hold")
set(_AUTO_APMS_PX4__GOTO_ACTION_PREFIX "go_to_")
set(_AUTO_APMS_PX4__GOTO_GLOBAL_ACTION_NAME "${_AUTO_APMS_PX4__GOTO_ACTION_PREFIX}global")
set(_AUTO_APMS_PX4__GOTO_LOCAL_ACTION_NAME "${_AUTO_APMS_PX4__GOTO_ACTION_PREFIX}local")
set(_AUTO_APMS_PX4__LAND_ACTION_NAME "land")
set(_AUTO_APMS_PX4__RTL_ACTION_NAME "rtl")
set(_AUTO_APMS_PX4__TAKEOFF_ACTION_NAME "takeoff")
set(_AUTO_APMS_PX4__MISSION_ACTION_NAME "mission")

#
# ------------ Library --------------
#

add_library(${PROJECT_NAME} SHARED
    "src/vehicle_command_client.cpp"
)
target_include_directories(${PROJECT_NAME} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)
target_link_libraries(${PROJECT_NAME} PUBLIC
    auto_apms_util::auto_apms_util
    px4_ros2_cpp::px4_ros2_cpp
    Eigen3::Eigen
    ${px4_msgs_TARGETS}
)

# Install the version header to the autogenerated headers dir also used by rosidl generators
ament_generate_version_header(${PROJECT_NAME} HEADER_PATH "${PROJECT_NAME}/version.hpp")

#
# ------------ Skills --------------
#

add_library(px4_skills SHARED
    "src/skill/arm_disarm.cpp"
    "src/skill/enable_hold.cpp"
    "src/skill/goto.cpp"
    "src/skill/land.cpp"
    "src/skill/takeoff.cpp"
    "src/skill/rtl.cpp"
    "src/skill/mission.cpp"
)
target_link_libraries(px4_skills PUBLIC
    ${PROJECT_NAME}
    rclcpp_components::component
    tf2_eigen::tf2_eigen
    auto_apms_util::auto_apms_util
    ${auto_apms_px4_interfaces_TARGETS}
)
target_compile_definitions(px4_skills PRIVATE
    _AUTO_APMS_PX4__ARM_DISARM_ACTION_NAME="${_AUTO_APMS_PX4__ARM_DISARM_ACTION_NAME}"
    _AUTO_APMS_PX4__ENABLE_HOLD_ACTION_NAME="${_AUTO_APMS_PX4__ENABLE_HOLD_ACTION_NAME}"
    _AUTO_APMS_PX4__GOTO_GLOBAL_ACTION_NAME="${_AUTO_APMS_PX4__GOTO_GLOBAL_ACTION_NAME}"
    _AUTO_APMS_PX4__GOTO_LOCAL_ACTION_NAME="${_AUTO_APMS_PX4__GOTO_LOCAL_ACTION_NAME}"
    _AUTO_APMS_PX4__LAND_ACTION_NAME="${_AUTO_APMS_PX4__LAND_ACTION_NAME}"
    _AUTO_APMS_PX4__RTL_ACTION_NAME="${_AUTO_APMS_PX4__RTL_ACTION_NAME}"
    _AUTO_APMS_PX4__TAKEOFF_ACTION_NAME="${_AUTO_APMS_PX4__TAKEOFF_ACTION_NAME}"
    _AUTO_APMS_PX4__MISSION_ACTION_NAME="${_AUTO_APMS_PX4__MISSION_ACTION_NAME}"
)

rclcpp_components_register_nodes(px4_skills
    "auto_apms_px4::ArmDisarmSkill"
    "auto_apms_px4::EnableHoldSkill"
    "auto_apms_px4::GoToGlobalSkill"
    "auto_apms_px4::GoToLocalSkill"
    "auto_apms_px4::LandSkill"
    "auto_apms_px4::TakeoffSkill"
    "auto_apms_px4::RTLSkill"
    "auto_apms_px4::MissionSkill"
)

#
# ------------ Examples --------------
#
add_executable(takeoff_and_land_example
    "src/example/takeoff_and_land.cpp"
)
target_link_libraries(takeoff_and_land_example
    ${PROJECT_NAME}
    ${auto_apms_px4_interfaces_TARGETS}
)

#
# ------------ Packaging --------------
#

# Examples
install(
    TARGETS
    takeoff_and_land_example
    DESTINATION "lib/${PROJECT_NAME}"
)

###### Export libraries ######
install(
    TARGETS
    ${PROJECT_NAME}
    EXPORT export_${PROJECT_NAME}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)
ament_export_targets(export_${PROJECT_NAME} HAS_LIBRARY_TARGET)
ament_export_dependencies(
    px4_msgs
    px4_ros2_cpp
    eigen3_cmake_module
    Eigen3
    auto_apms_px4_interfaces
    auto_apms_util
)

##### Plugin libraries ######
install(
    TARGETS
    px4_skills
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

install(
    DIRECTORY "include/${PROJECT_NAME}"
    DESTINATION "include"
)

install(
    DIRECTORY "launch"
    DESTINATION "share/${PROJECT_NAME}"
)

ament_package()
